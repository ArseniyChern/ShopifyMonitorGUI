
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.aspose.slides.ChartType;
import com.aspose.slides.FillType;
import com.aspose.slides.IAutoShape;
import com.aspose.slides.IChart;
import com.aspose.slides.IChartDataPoint;
import com.aspose.slides.IChartDataWorkbook;
import com.aspose.slides.IChartSeries;
import com.aspose.slides.IChartSeriesCollection;
import com.aspose.slides.IColumn;
import com.aspose.slides.IDataLabel;
import com.aspose.slides.ILayoutSlide;
import com.aspose.slides.IParagraph;
import com.aspose.slides.ISlide;
import com.aspose.slides.ISlideCollection;
import com.aspose.slides.ITable;
import com.aspose.slides.ITextFrame;
import com.aspose.slides.ITrendline;
import com.aspose.slides.LayoutSlide;
import com.aspose.slides.LineDashStyle;
import com.aspose.slides.LineStyle;
import com.aspose.slides.MarkerStyleType;
import com.aspose.slides.NullableBool;
import com.aspose.slides.Paragraph;
import com.aspose.slides.Presentation;
import com.aspose.slides.PresetColor;
import com.aspose.slides.SaveFormat;
import com.aspose.slides.ShapeType;
import com.aspose.slides.TextAlignment;
import com.aspose.slides.TextAnchorType;
import com.aspose.slides.TrendlineType;

public class CreateAPresentation {
	static JSONParser parser = new JSONParser();

	static JSONObject mainJsonObject;

	static Presentation pres;
	static String dataDir = "/Users/Arseniy/Desktop/";
	static ArrayList<ArrayList<String>> noOfPosts;
	static ArrayList<String> noOfPostsRows;
	static JSONArray noOfPostsJSONArray;

	// Slide 1-

	static void setOverallSummary(ArrayList<String> Summary) {

		ISlide sld = (ISlide) pres.getSlides().get_Item(0);

		// Add an AutoShape of Rectangle type
		IAutoShape ashp = sld.getShapes().addAutoShape(ShapeType.Rectangle, 10, 10, 500, 50);

		// Add ITextFrame to the Rectangle
		ashp.addTextFrame("EXECUTIVE SUMMARY");
		ashp.getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0).getPortionFormat().setFontHeight(40);

		// Change the text color to Black (which is White by default)
		ashp.getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0).getPortionFormat().getFillFormat()
				.setFillType(FillType.Solid);
		ashp.getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0).getPortionFormat().getFillFormat()
				.getSolidFillColor().setColor(java.awt.Color.BLACK);

		// Change the line color of the rectangle to White
		ashp.getShapeStyle().getLineColor().setColor(java.awt.Color.WHITE);

		// Remove any fill formatting in the shape

		ashp.getFillFormat().setFillType(FillType.NoFill);

		IAutoShape ashp1 = sld.getShapes().addAutoShape(ShapeType.Rectangle, 10, 100, 300, 400);

		// Add ITextFrame to the Rectangle
		String sum = "";
		ashp1.addTextFrame("");
		Paragraph p = new Paragraph();
		p.setText("Summary");
		p.getPortions().get_Item(0).getPortionFormat().setFontHeight(20);
		p.getPortions().get_Item(0).getPortionFormat().setFontBold(NullableBool.True);
		ashp1.getTextFrame().getParagraphs().add(p);

		p = new Paragraph();
		p.setText("");
		ashp1.getTextFrame().getParagraphs().add(p);

		p = new Paragraph();
		p.setText("");
		ashp1.getTextFrame().getParagraphs().add(p);
		p = new Paragraph();
		p.setText("");
		ashp1.getTextFrame().getParagraphs().add(p);

		for (int i = 0; i < Summary.size(); i++) {
			p = new Paragraph();
			p.setText(" Â·  " + Summary.get(i));
			ashp1.getTextFrame().getParagraphs().add(p);

			p = new Paragraph();
			p.setText("");
			ashp1.getTextFrame().getParagraphs().add(p);

		}

		ashp1.getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0).getPortionFormat().setFontHeight(10);
		ashp1.getTextFrame().getParagraphs().get_Item(0).getParagraphFormat().setAlignment(TextAlignment.Left);
		ashp1.getTextFrame().getTextFrameFormat().setAnchoringType(TextAnchorType.Top);
		// Change the text color to Black (which is White by default)

	}

	static void setKeyMetricks(ArrayList<String> Metricks) {
		ISlide sld = (ISlide) pres.getSlides().get_Item(0);

		double[] dblCols = { 100, 75, 75, 75 };
		double[] dblRows = { 20, 20 };

		// Add table shape to slide
		ITable tbl = sld.getShapes().addTable(350, 75, dblCols, dblRows);

		tbl.getRows().get_Item(0).get_Item(0).getTextFrame().setText("KEY METRICS");
		tbl.getRows().get_Item(0).get_Item(1).getTextFrame().setText("POSITIVE");
		tbl.getRows().get_Item(0).get_Item(2).getTextFrame().setText("NUETRAL");
		tbl.getRows().get_Item(0).get_Item(3).getTextFrame().setText("NEGATIVE");

		for (int i = 0; i < Metricks.size(); i++) {
			tbl.getRows().get_Item(1).get_Item(i).getTextFrame().setText(Metricks.get(i));
		}

		tbl.getRows().get_Item(0).get_Item(1).getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0)
				.getPortionFormat().setFontHeight(12);
		tbl.getRows().get_Item(0).get_Item(2).getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0)
				.getPortionFormat().setFontHeight(12);
		tbl.getRows().get_Item(0).get_Item(3).getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0)
				.getPortionFormat().setFontHeight(11);

	}

	static void setNoOfPosts(ArrayList<ArrayList<String>> Posts) {

		// Get the first slide
		ISlide sld = (ISlide) pres.getSlides().get_Item(0);

		double[] dblCols = { 200, 50, 85 };
		double[] dblRows = { 5 };

		// Add table shape to slide
		ITable tbl = sld.getShapes().addTable(350, 200, dblCols, dblRows);

		for (int i = 0; i < Posts.size() - 1; i++) {
			tbl.getRows().addClone(tbl.getRows().get_Item(0), false);
		}
		tbl.getRows().get_Item(0).get_Item(0).getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0)
				.getPortionFormat().setFontHeight(12);

		// Merge cells 1 & 2 of row 1
		tbl.mergeCells(tbl.getRows().get_Item(0).get_Item(1), tbl.getRows().get_Item(0).get_Item(2), false);

		// Add text to the merged cell
		tbl.getRows().get_Item(0).get_Item(1).getTextFrame().getParagraphs().get_Item(0).getParagraphFormat()
				.setAlignment(TextAlignment.Center);
		for (int i = 0; i < Posts.size(); i++) {
			for (int i1 = 0; i1 < Posts.get(i).size(); i1++) {

				tbl.getRows().get_Item(i).get_Item(i1).getTextFrame().setText(Posts.get(i).get(i1));
				tbl.getRows().get_Item(i).get_Item(i1).getTextFrame().getParagraphs().get_Item(0).getPortions()
						.get_Item(0).getPortionFormat().setFontHeight(12);
			}
		}

	}

	// Slide 2-

	static void setLineChart(ArrayList<ArrayList<String>> input) {
		ISlide sld = pres.getSlides().get_Item(1);

		// Add chart with default data
		IChart chart = sld.getShapes().addChart(ChartType.Pie, 100, 100, 400, 400);

		// Setting chart Title
		chart.getChartTitle().addTextFrameForOverriding("Sample Title");
		
		chart.getChartTitle().getTextFrameForOverriding().getTextFrameFormat().setCenterText(NullableBool.True);
		chart.getChartTitle().setHeight(20);
		chart.hasTitle();

		// Set first series to Show Values
		chart.getChartData().getSeries().get_Item(0).getLabels().getDefaultDataLabelFormat().setShowValue(true);

		// Setting the index of chart data sheet
		int defaultWorksheetIndex = 0;

		// Getting the chart data WorkSheet
		IChartDataWorkbook fact = chart.getChartData().getChartDataWorkbook();

		// Delete default generated series and categories
		chart.getChartData().getSeries().clear();
		chart.getChartData().getCategories().clear();

		// Adding new categories
		chart.getChartData().getCategories().add(fact.getCell(0, 1, 0, "First Qtr"));
		chart.getChartData().getCategories().add(fact.getCell(0, 2, 0, "2nd Qtr"));
		chart.getChartData().getCategories().add(fact.getCell(0, 3, 0, "3rd Qtr"));

		// Adding new series
		IChartSeries series = chart.getChartData().getSeries().add(fact.getCell(0, 0, 1, "Series 1"), chart.getType());

		// Now populating series data
		series.getDataPoints().addDataPointForPieSeries(fact.getCell(defaultWorksheetIndex, 1, 1, 20));
		series.getDataPoints().addDataPointForPieSeries(fact.getCell(defaultWorksheetIndex, 2, 1, 50));
		series.getDataPoints().addDataPointForPieSeries(fact.getCell(defaultWorksheetIndex, 3, 1, 30));

		// Not working in new version
		// Adding new points and setting sector color
		// series.IsColorVaried = true;
		chart.getChartData().getSeriesGroups().get_Item(0).isColorVaried();

		IChartDataPoint point = series.getDataPoints().get_Item(0);
		point.getFormat().getFill().setFillType(FillType.Solid);
		point.getFormat().getFill().getSolidFillColor().setColor(Color.CYAN);
		// Setting Sector border
		point.getFormat().getLine().getFillFormat().setFillType(FillType.Solid);
		point.getFormat().getLine().getFillFormat().getSolidFillColor().setColor(Color.GRAY);
		point.getFormat().getLine().setWidth(3.0);
		point.getFormat().getLine().setStyle(LineStyle.ThinThick);
		point.getFormat().getLine().setDashStyle(LineDashStyle.DashDot);

		IChartDataPoint point1 = series.getDataPoints().get_Item(1);
		point1.getFormat().getFill().setFillType(FillType.Solid);
		point1.getFormat().getFill().getSolidFillColor().setColor(new Color(PresetColor.Brown));

		// Setting Sector border
		point1.getFormat().getLine().getFillFormat().setFillType(FillType.Solid);
		point1.getFormat().getLine().getFillFormat().getSolidFillColor().setColor(Color.BLUE);
		point1.getFormat().getLine().setWidth(3.0);
		point1.getFormat().getLine().setStyle(LineStyle.Single);
		point1.getFormat().getLine().setDashStyle(LineDashStyle.LargeDashDot);

		IChartDataPoint point2 = series.getDataPoints().get_Item(2);
		point2.getFormat().getFill().setFillType(FillType.Solid);
		point2.getFormat().getFill().getSolidFillColor().setColor(new Color(PresetColor.Coral));

		// Setting Sector border
		point2.getFormat().getLine().getFillFormat().setFillType(FillType.Solid);
		point2.getFormat().getLine().getFillFormat().getSolidFillColor().setColor(Color.RED);
		point2.getFormat().getLine().setWidth(2.0);
		point2.getFormat().getLine().setStyle(LineStyle.ThinThin);
		point2.getFormat().getLine().setDashStyle(LineDashStyle.LargeDashDotDot);

		// Create custom labels for each of categories for new series
		IDataLabel lbl1 = series.getDataPoints().get_Item(0).getLabel();
		// lbl.ShowCategoryName = true;
		lbl1.getDataLabelFormat().setShowValue(true);

		IDataLabel lbl2 = series.getDataPoints().get_Item(1).getLabel();
		lbl2.getDataLabelFormat().setShowValue(true);
		lbl2.getDataLabelFormat().setShowLegendKey(true);
		lbl2.getDataLabelFormat().setShowPercentage(true);

		IDataLabel lbl3 = series.getDataPoints().get_Item(2).getLabel();
		lbl3.getDataLabelFormat().setShowSeriesName(true);
		lbl3.getDataLabelFormat().setShowPercentage(true);

		// Showing Leader Lines for Chart
		series.getLabels().getDefaultDataLabelFormat().setShowLeaderLines(true);

		// Setting Rotation Angle for Pie Chart Sectors
		chart.getChartData().getSeriesGroups().get_Item(0).setFirstSliceAngle(180);

	}

	static void setTable(ArrayList<ArrayList<String>> input) {

		// Get the second slide
		ISlide sld = (ISlide) pres.getSlides().get_Item(1);

		double[] dblCols = { 75,75,75,75 };
		double[] dblRows = { 5,5,5,5 };

		// Add table shape to slide
		ITable tbl = sld.getShapes().addTable(350, 350, dblCols, dblRows);
		
		final int FONT_SIZE = 15;

		
		tbl.getRows().get_Item(0).get_Item(0).getTextFrame().getParagraphs().get_Item(0).getPortions().get_Item(0)
				.getPortionFormat().setFontHeight(12);

		// Add text to the merged cell
		tbl.getRows().get_Item(0).get_Item(1).getTextFrame().getParagraphs().get_Item(0).getParagraphFormat()
				.setAlignment(TextAlignment.Center);
		
		tbl.getRows().get_Item(0).get_Item(1).getTextFrame().setText("Negative");
		tbl.getRows().get_Item(0).get_Item(2).getTextFrame().setText("Neutral");
		tbl.getRows().get_Item(0).get_Item(3).getTextFrame().setText("Positive");
		
		tbl.getRows().get_Item(0).get_Item(1).getTextFrame().getParagraphs().get_Item(0).getPortions()
		.get_Item(0).getPortionFormat().setFontHeight(FONT_SIZE);
		tbl.getRows().get_Item(0).get_Item(2).getTextFrame().getParagraphs().get_Item(0).getPortions()
		.get_Item(0).getPortionFormat().setFontHeight(FONT_SIZE);
		tbl.getRows().get_Item(0).get_Item(3).getTextFrame().getParagraphs().get_Item(0).getPortions()
		.get_Item(0).getPortionFormat().setFontHeight(FONT_SIZE);
		
		tbl.getRows().get_Item(1).get_Item(0).getTextFrame().setText("Post");
		tbl.getRows().get_Item(2).get_Item(0).getTextFrame().setText("Comment");
		tbl.getRows().get_Item(3).get_Item(0).getTextFrame().setText("Total");
		
		tbl.getRows().get_Item(1).get_Item(0).getTextFrame().getParagraphs().get_Item(0).getPortions()
		.get_Item(0).getPortionFormat().setFontHeight(FONT_SIZE);
		tbl.getRows().get_Item(2).get_Item(0).getTextFrame().getParagraphs().get_Item(0).getPortions()
		.get_Item(0).getPortionFormat().setFontHeight(FONT_SIZE);
		tbl.getRows().get_Item(3).get_Item(0).getTextFrame().getParagraphs().get_Item(0).getPortions()
		.get_Item(0).getPortionFormat().setFontHeight(FONT_SIZE);
		
		
		
		for (int i = 0; i < input.size(); i++) {
			for (int i1 = 0; i1 < input.get(i).size(); i1++) {
				System.out.println(""+input.get(i).get(i1));
				String stringToInput = input.get(i).get(i1);
				
				
				tbl.getRows().get_Item(i+1).get_Item(i1+1).getTextFrame().setText(stringToInput);
				tbl.getRows().get_Item(i+1).get_Item(i1+1).getTextFrame().getParagraphs().get_Item(0).getPortions()
						.get_Item(0).getPortionFormat().setFontHeight(FONT_SIZE);
			}
		}

	}

	public static final void main(String[] args) throws FileNotFoundException, IOException, ParseException {

		mainJsonObject = (JSONObject) parser.parse(new FileReader("/Users/Arseniy/Desktop/sampleinput.json"));

		pres = new Presentation();

		// ------------------ Set number of posts & data
		noOfPosts = new ArrayList<ArrayList<String>>();
		noOfPostsRows = new ArrayList<String>();

		noOfPostsJSONArray = (JSONArray) mainJsonObject.get("no of posts/comments by media");

		noOfPostsRows.add("NO.OF POST/COMMENT BY MEDIA");
		noOfPostsRows.add((String) noOfPostsJSONArray.get(0));

		noOfPosts.add(noOfPostsRows);
		noOfPostsRows = new ArrayList<String>();

		for (int i = 1; i < noOfPostsJSONArray.size(); i++) {
			setPostInfo(i);
		}

		setNoOfPosts(noOfPosts);
		// ------------------ Set key metrics
		JSONArray keyMetrics = (JSONArray) mainJsonObject.get("key_metrics");
		ArrayList<String> metrics = new ArrayList<String>();

		metrics.add("# of posts + comments");
		for (int i = 0; i < keyMetrics.size(); i++) {
			metrics.add("" + keyMetrics.get(i));
		}

		setKeyMetricks(metrics);
		// ------------------ Set Overall Summary

		JSONArray summary = (JSONArray) mainJsonObject.get("summary");
		ArrayList<String> Summary = new ArrayList<String>();

		for (int i = 0; i < summary.size(); i++) {
			Summary.add((String) summary.get(i));
		}

		setOverallSummary(Summary);

		/**
		 * 
		 * SLIDE 2
		 * 
		 **/
		pres.getSlides().addEmptySlide(pres.getLayoutSlides().get_Item(0));

		// ------------------ Create the chart
		ArrayList<ArrayList<String>> graphData = new ArrayList<ArrayList<String>>();
		JSONArray jsonData = (JSONArray) mainJsonObject.get("data_1");

		for (int i = 0; i < jsonData.size(); i++) {
			ArrayList<String> temp = new ArrayList<String>();
			JSONObject iterator = (JSONObject) jsonData.get(i);

			temp.add((String) iterator.get("Date"));

			temp.add("" + iterator.get("Positive"));
			temp.add("" + iterator.get("Netural"));
			temp.add("" + iterator.get("Negative"));

			graphData.add(temp);
		}

		setLineChart(graphData);
		// ------------------ Create the table
		ArrayList<ArrayList<String>> tableData = new ArrayList<ArrayList<String>>();
		JSONArray data2 = (JSONArray) mainJsonObject.get("data_2");

		for (int i = 0; i < data2.size(); i++) {
			ArrayList<String> temp = new ArrayList<String>();
			JSONArray tempJSONArray = (JSONArray) data2.get(i);

			temp.add((String) tempJSONArray.get(0));
			temp.add((String) tempJSONArray.get(1));
			temp.add((String) tempJSONArray.get(2));


			tableData.add(temp);
		}
		setTable(data2);

		pres.save(dataDir + "HelloWorld.pptx", SaveFormat.Pptx);
		System.out.println("Finished");
	}

	static void setPostInfo(int toGet) {
		JSONArray currentArray = (JSONArray) noOfPostsJSONArray.get(toGet);

		for (int i1 = 0; i1 < currentArray.size(); i1++) {
			noOfPostsRows.add("" + currentArray.get(i1));
		}
		noOfPosts.add(noOfPostsRows);
		noOfPostsRows = new ArrayList<String>();
	}
}
