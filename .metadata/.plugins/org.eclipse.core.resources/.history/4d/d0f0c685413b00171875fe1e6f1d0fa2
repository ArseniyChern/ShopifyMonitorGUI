package processAutomator;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

public class Traceroute {
	static BufferedWriter bw;
	static String st;
	static List t = new List();

	public static synchronized void printTraceRoute() {
		ArrayList<String> y;
		System.out.println("called method");
		try {
			Process proc = Runtime.getRuntime().exec("traceroute 8.8.8.8");
			BufferedInputStream stream = new BufferedInputStream(proc.getInputStream());
			int data = 0;
			y = new ArrayList<String>();
			int i = 0;
			System.out.println(stream.read());
			stream.read();
			while ((data = stream.read()) > 0) {
				System.out.print(data + ":" + (char) data);

				st += (char) data;

				if (data == 10) {

					t.add(st);
					st = new String();
				}

			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	public static void main(String[] args) {

		String pass = "people";

		Process p = null;

		BufferedReader reader = null;
		Frame f = new Frame();
		f.addWindowListener(new WindowListener() {

			@Override
			public void windowOpened(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowClosing(WindowEvent e) {
				f.dispose();

			}

			@Override
			public void windowClosed(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowIconified(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowDeiconified(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowActivated(WindowEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void windowDeactivated(WindowEvent e) {
				// TODO Auto-generated method stub

			}

		});
		f.add(t);
		
		try {
			p = Runtime.getRuntime().exec("sudo killall -HUP mDNSResponder");
			bw = new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));
			bw.write(pass);
			bw.flush();

			bw = new BufferedWriter(new OutputStreamWriter(p.getOutputStream()));

			reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

			String line = "";
			while ((line = reader.readLine()) != null) {
				System.out.println(line);
			}

		} catch (IOException e1) {
			e1.printStackTrace();
		}
		printTraceRoute();

		String output = executeCommand("networksetup -setairportpower airport off");
		System.out.println(output);

		output = executeCommand("networksetup -setairportpower airport on");
		System.out.println(output);

		System.out.println(st);
		f.setVisible(true);

	}

	private static String executeCommand(String command) {
		StringBuffer output = new StringBuffer();

		Process p;
		try {
			p = Runtime.getRuntime().exec(command);
			p.waitFor();
			BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

			String line = "";
			while ((line = reader.readLine()) != null) {
				output.append(line + "\n");
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return output.toString();

	}
}